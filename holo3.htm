
<!DOCTYPE html>
<center>
<h1 style="color:#FFD700;font-family:verdana;">Holocene Code Terminal</h1>
<body style="background-color:#080808;">
</body>
<html>
<head>
    <title>Holocene Code Terminal</title>
    <style>
        * {
            box-sizing: border-box;
        }
    	div {
            padding: 0px;
            background-color: #080808;
            overflow: hidden;
        }
    	input[type=text], textarea, select {
            padding: 10px;
            border-radius: 10px;
            line-height: 1.7;
            font-size: 12px;
        }
        input[type=button]{ 
            width: auto;
            float: right;
            cursor: pointer;
            padding: 5px;
        }
        hr {
            width: 800px;
        }
    </style>
</head>
<html>
<head>
    <meta charset="utf-8"/>
    <title> Holocene Programming Language </title>
    <script>
    </script>
    <style>
    .tln-active, .tln-wrapper, .tln-line {
  margin: 0;
  border: 0;
  padding: 0;
  outline: 0;
  box-sizing: border-box;
  vertical-align: middle;
  list-style: none;
}
.tln-active {
  display: inline-block;
  padding: 0.5em;
  height: 100%;
  font-size: 0.9em;
  line-height: 1.5;
  font-family: "Lucida Console", monospace;
  word-break: break-all;
  border: 5px solid #505050;
  background-color: #151515;
  color: #FFD700;
  resize: none;
  overflow-wrap: normal;
  overflow-x: auto;
  white-space: pre;
}
.tln-wrapper {
  width: 2.58em;
  padding: 0.6875em 0.3125em 2.1875em;
  height: 36.1em;
  word-break: break-all;
  overflow: hidden;
  display: inline-block;
  counter-reset: line;
}
.tln-line {
  width: 100%;
  display: block;
  text-align: right;
  line-height: 1.5;
  font-size: 0.9em;
  color: #FFD700;
  font-family: "lucida console";
}
.tln-line::before {
  counter-increment: line;
  content: counter(line);
  font-size: 0.9em;
  user-select: none;
}
    </style>
    <script>
        const TLN = {
  eventList: {},
  update_line_numbers: function(ta, el) {
    // Let's check if there are more or less lines than before
    const line_count = ta.value.split("\n").length;
    const child_count = el.children.length;
    let difference = line_count - child_count;
    // If there is any positive difference, we need to add more line numbers
    if(difference > 0) {
      // Create a fragment to work with so we only have to update DOM once
      const frag = document.createDocumentFragment();
      // For each new line we need to add,
      while(difference > 0) {
        // Create a <span>, add TLN class name, append to fragment and
        // update difference
        const line_number = document.createElement("span");
        line_number.className = "tln-line";
        frag.appendChild(line_number);
        difference--;
      }
      // Append fragment (with <span> children) to our wrapper element
      el.appendChild(frag);
    }
    // If, however, there's negative difference, we need to remove line numbers
    while(difference < 0) {
      // Simple stuff, remove last child and update difference
      el.removeChild(el.lastChild);
      difference++;
    }
  },
  append_line_numbers: function(id) {
    // Get reference to desired <textarea>
    const ta = document.getElementById(id);
    // If getting reference to element fails, warn and leave
    if(ta == null) {
      return console.warn("[tln.js] Couldn't find textarea of id '"+id+"'");
    }
    // If <textarea> already has TLN active, warn and leave
    if(ta.className.indexOf("tln-active") != -1) {
      return console.warn("[tln.js] textarea of id '"+id+"' is already numbered");
    }
    // Otherwise, we're safe to add the class name and clear inline styles
    ta.classList.add("tln-active");
    ta.style = {};

    // Create line numbers wrapper, insert it before <textarea>
    const el = document.createElement("div");
    el.className = "tln-wrapper";
    ta.parentNode.insertBefore(el, ta);
    // Call update to actually insert line numbers to the wrapper
    TLN.update_line_numbers(ta, el);
    // Initialize event listeners list for this element ID, so we can remove
    // them later if needed
    TLN.eventList[id] = [];

    // Constant list of input event names so we can iterate
    const __change_evts = [
      "propertychange", "input", "keydown", "keyup"
    ];
    // Default handler for input events
    const __change_hdlr = function(ta, el) {
      return function(e) {
        // If pressed key is Left Arrow (when cursor is on the first character),
        // or if it's Enter/Home, then we set horizontal scroll to 0
        // Check for .keyCode, .which, .code and .key, because the web is a mess
        // [Ref] stackoverflow.com/a/4471635/4824627
        if((+ta.scrollLeft==10 && (e.keyCode==37||e.which==37
          ||e.code=="ArrowLeft"||e.key=="ArrowLeft"))
        || e.keyCode==36||e.which==36||e.code=="Home"||e.key=="Home"
        || e.keyCode==13||e.which==13||e.code=="Enter"||e.key=="Enter"
        || e.code=="NumpadEnter")
          ta.scrollLeft = 0;
        // Whether we scrolled or not, let's check for any line count updates
        TLN.update_line_numbers(ta, el);
      }
    }(ta, el);

    // Finally, iterate through those event names, and add listeners to
    // <textarea> and to events list
    /// TODO: Performance gurus: is this suboptimal? Should we only add a few
    /// listeners? I feel the update method is optimal enough for this to not
    /// impact too much things.
    for(let i = __change_evts.length - 1; i >= 0; i--) {
      ta.addEventListener(__change_evts[i], __change_hdlr);
      TLN.eventList[id].push({
        evt: __change_evts[i],
        hdlr: __change_hdlr
      });
    }

    // Constant list of scroll event names so we can iterate
    const __scroll_evts = [ "change", "mousewheel", "scroll" ];
    // Default handler for scroll events (pretty self explanatory)
    const __scroll_hdlr = function(ta, el) {
      return function() {  el.scrollTop = ta.scrollTop;  }
    }(ta, el);
    // Just like before, iterate and add listeners to <textarea> and to list
    /// TODO: Also just like before: performance?
    for(let i = __scroll_evts.length - 1; i >= 0; i--) {
      ta.addEventListener(__scroll_evts[i], __scroll_hdlr);
      TLN.eventList[id].push({
        evt: __scroll_evts[i],
        hdlr: __scroll_hdlr
      });
    }
  },
  remove_line_numbers: function(id) {
    // Get reference to <textarea>
    const ta = document.getElementById(id);
    // If getting reference to element fails, warn and leave
    if(ta == null) {
      return console.warn("[tln.js] Couldn't find textarea of id '"+id+"'");
    }
    // If <textarea> already doesn't have TLN active, warn and leave
    if(ta.className.indexOf("tln-active") == -1) {
      return console.warn("[tln.js] textarea of id '"+id+"' isn't numbered");
    }
    // Otherwise, remove class name
    ta.classList.remove("tln-active");

    // Remove previous sibling if it's our wrapper (otherwise, I guess 'woops'?)
    const __wrapper_chck = ta.previousSibling;
    if(__wrapper_chck.className == "tln-wrapper")
      __wrapper_chck.remove();

    // If somehow there's no event listeners list, we can leave
    if(!TLN.eventList[id]) return;
    // Otherwise iterate through listeners list and remove each one
    for(let i = TLN.eventList[id].length - 1; i >= 0; i--) {
      const evt = TLN.eventList[id][i];
      ta.removeEventListener(evt.evt, evt.hdlr);
    }
    // Finally, delete the listeners list for that ID
    delete TLN.eventList[id];
  }
}
        
    </script>
</head>
<body>
    <div id="wrapper">
        <textarea
        id="msg"
        name="msg"
        class="banana-cake" 
        spellcheck="false"
        rows="25"
        cols="85"
        onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color: #101010;color:#FFD700;resize:none;font-family:courier new"
>//Holocene Code Terminal v1.0.0
//Copyright Â© 2022 Altacade Studios 

number = prompt("What is your favorite number?")
alert("Your favorite number is " + number)

//Initialize variables with this assignment operator
x = 1

if(x == 1)
{
    //Printing to the console
    "x is 1."
}
else if(x == 2)
{
    "x is 2."
}
else
{
    "x is something other than 1 or 2."
}</textarea>
        <br>

</br>
        <textarea id="result"
            name="console"
            spellcheck="false"
            rows="4"
            cols="60"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
></textarea>
<br>
</br>
<button onclick="run()">Run code</button>
<button onclick="saveFile()">Export script</button>
<button onclick="saveOutput()">Export output</button>
<br></br>
<hr></hr>
<h2 style="color:#FFD700;font-family:verdana;">Programs</h2>
<textarea id="helloworld"
            spellcheck="false"
            rows="4"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program outputs the phrase "Hello, World!"

"Hello, World!"</textarea>
<br></br>
<textarea id="helloworld2"
            spellcheck="false"
            rows="8"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program outputs the same phrase, but it will appear as an alert box.
//The output box below will appear as "undefined" if you have no return value.
//Alerts can also have multiple outputs, unlike the output box.

alert("Hello, World!")
alert("I am a message.")
alert("Goodbye!")</textarea>
<br></br>
        <textarea id="variables"
            spellcheck="false"
            rows="9"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program contains variables and uses addition to add them.

x = 1
y = 2

//Try changing the values of x and y.

x + " + " + y + " = " + (x + y)
</textarea>
<br></br>
        <textarea id="ifelse"
            spellcheck="false"
            rows="14"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program uses an if/else statement.
//What if you change "i" to false?

i = true

if(i == true)
{
    "True!"
}
else if(i == false)
{
    "False!"
}
</textarea>
<br></br>
        <textarea id="functions"
            spellcheck="false"
            rows="12"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program uses defines a function and calls it.
//Notice how "return" must be used to output inside of a function.

myVariable = 5

function myFunction()
{
    return myVariable
}

myFunction()
</textarea>
<br></br>
        <textarea id="prompt1"
            spellcheck="false"
            rows="7"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program contains a prompt.
//Prompts ask the user for an input.

x = prompt("What is your name?")

"Hello, " + x
</textarea>
<br></br>
<textarea id="random"
            spellcheck="false"
            rows="19"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program also uses a random number generator.
//"Math.random" generates the number, and "Math.floor" makes it a whole number.
//The number that it's multiplied by, in this case 3, is the number of outcomes.

x = Math.floor(Math.random() * 3)

if(x == 0)
{
    "x is 0."
}
else if(x == 1)
{
    "x is 1."
}
else if(x == 2)
{
    "x is 2."
}</textarea>
<br></br>
        <textarea id="prompt2"
            spellcheck="false"
            rows="25"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program also uses prompts and a random number generator.

x = Math.floor(Math.random() * 5)
y = prompt("What is your favorite programming language?")
if(x == 4)
{
    "I just adore " + y + " as well. One of the best."
}
else if(x == 3)
{
    "I enjoy " + y + ". It's quite fun."
}
else if (x == 2)
{
    "I think " + y + " is fine. Not the best nor worst."
}
else if (x == 1)
{
    "I don't like " + y + ". It's just not my thing."
}
else
{
    "I hate " + y + ", don't talk about it ever again."
}
</textarea>
<br></br>
        <textarea id="conditions"
            spellcheck="false"
            rows="37"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program uses && (logical AND) and || (logical OR).
//These are useful if you have multiple conditions in a loop.

x = Math.floor(Math.random() * 3)
y = Math.floor(Math.random() * 3)

if(x == 0 && y == 0)
{
    alert("x and y are both 0.")
    "x: " + x + ", y: " + y
}
else if(x == 1 && y == 1)
{
    alert("x and y are both 1.")
    "x: " + x + ", y: " + y
}
else if(x == 2 && y == 2)
{
    alert("x and y are both 2.")
    "x: " + x + ", y: " + y
}
else if(x == 0 || y == 0)
{
    alert("x or y is 0, but not the other.")
    "x: " + x + ", y: " + y
}
else if(x == 1 || y == 1)
{
    alert("x or y is 1, but not the other.")
    "x: " + x + ", y: " + y
}
else if(x == 2 || y == 2)
{
    alert("x or y is 2, but not the other.")
    "x: " + x + ", y: " + y
}</textarea>
<br></br>
        <textarea id="forwhile"
            spellcheck="false"
            rows="20"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//For and while loops serve similar purposes: repeating things.
//The "++" after a variable is the same thing as "variable = variable + 1".

alert("For loop example:")

for(i = 1; i <= 5; i++)
{
    alert(i)
}

alert("While loop example:")

j = 1

while(j <= 10)
{
    alert(j)
    j++
}</textarea>
<br></br>
        <textarea id="wait"
            spellcheck="false"
            rows="12"
            cols="85"
            disabled="true"
            onkeydown="if(event.keyCode===9){var v=this.value,s=this.selectionStart,e=this.selectionEnd;this.value=v.substring(0, s)+'    '+v.substring(e);this.selectionStart=this.selectionEnd=s+4;return false;}"
            style="background-color:#151515;color:#FFD700;resize:none;font-family:lucida console"
>
//This program will pause for a set amount of time before continuing.
//It uses a function called "delay" which can be used anywhere.
//The number after "delay" is the amount of milliseconds that it will wait for.
//5000 milliseconds = 5 seconds, 25000 milliseconds = 25 seconds, etc.

function delay(time)
{
    return new Promise(resolve => setTimeout(resolve, time))
}

delay(5000).then(() => alert("5 seconds have passed."))</textarea>
<br></br>
<br></br>
<script>
    TLN.append_line_numbers('msg');
    //wrapper.style.height=200+'px';
</script>
<script>
  function run() {
  var el = document.getElementById('msg');
  var resultEl = document.getElementById('result')
  resultEl.innerHTML = el && eval(el.value);
  }
</script>
<script>
     let saveFile = () => {
    	
        // Get the data from each element on the form.
        const msg = document.getElementById('msg');
        
        // This variable stores all the data.
        let data = 
            msg.value;
        
        // Convert the text to BLOB.
        const textToBLOB = new Blob([data], { type: 'text/plain' });
        const sFileName = 'script.txt';	   // The file to save the data.

        let newLink = document.createElement("a");
        newLink.download = sFileName;

        if (window.webkitURL != null) {
            newLink.href = window.webkitURL.createObjectURL(textToBLOB);
        }
        else {
            newLink.href = window.URL.createObjectURL(textToBLOB);
            newLink.style.display = "none";
            document.body.appendChild(newLink);
        }

        newLink.click(); 
    }
</script>
<script>
     let saveOutput = () => {
    	
        // Get the data from each element on the form.
        const result = document.getElementById('result');
        
        // This variable stores all the data.
        let data = 
            result.value;
        
        // Convert the text to BLOB.
        const textToBLOB = new Blob([data], { type: 'text/plain' });
        const sFileName = 'output.txt';	   // The file to save the data.

        let newLink = document.createElement("a");
        newLink.download = sFileName;

        if (window.webkitURL != null) {
            newLink.href = window.webkitURL.createObjectURL(textToBLOB);
        }
        else {
            newLink.href = window.URL.createObjectURL(textToBLOB);
            newLink.style.display = "none";
            document.body.appendChild(newLink);
        }

        newLink.click(); 
    }
</script>
</html>
